"use client";
import { useGSAP } from "@gsap/react";
import gsap from "gsap";
import {
  Acme,
  Inter,
  Libre_Baskerville,
  Montserrat,
  Space_Grotesk,
} from "next/font/google";
import { useEffect, useState } from "react";
import SplitType from "split-type";
import Header from "./composants/Header";
import "./globals.css";

const inter = Inter({ subsets: ["latin"] });
const police = Libre_Baskerville({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-baskerville",
  weight: "400",
});

const police1 = Montserrat({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-Montserrat",
  weight: "400",
});

const police3 = Space_Grotesk({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-space_Grotesk",
  weight: "400",
});

const police4 = Acme({
  subsets: ["latin"],
  display: "swap",
  variable: "--font-Andada_Pro",
  weight: "400",
});

// export const metadata: Metadata = {
//   title: "Create Next App",
//   description: "Generated by create next app",
// };

export default function RootLayout({
  children,
}: Readonly<{
  children: React.ReactNode;
}>) {
  const [position, setPosition] = useState({ x: 0, y: 0 });
  const updatePosition = (event: MouseEvent) => {
    setPosition({ x: event.clientX, y: event.clientY });
  };
  useEffect(() => {
    let rafID: number | null = null;

    const handleMouseMove = (event: MouseEvent) => {
      updatePosition(event);
    };

    const animate = () => {
      rafID = requestAnimationFrame(animate);
      window.addEventListener("mousemove", handleMouseMove);
    };

    animate();

    gsap.to(".cursorpointer", {
      ease: "power4",
      duration: 0.4,
    });

    return () => {
      window.removeEventListener("mousemove", handleMouseMove);
      if (rafID !== null) cancelAnimationFrame(rafID);
    };
  }, []);


  return (
    <html
      lang="en"
      className={` ${police.variable} ${police1.variable} ${police3.variable} ${police4.variable}`}
    >
      <body className={inter.className + "relative"}>
        <div className="ff bg-white relative flex justify-center items-center w-full">
          <div
            style={{ left: `${position.x}px`, top: `${position.y}px` }}
            className="fixed cursorpointer  pointer-events-none z-50 h-14 will-change-auto inset-0 select-none w-14 border-2 border-black rounded-full "
          ></div>
          <div className="flex flex-col w-full overflow-hidden  ">
            <Header />
            {children}
          </div>
        </div>
      </body>
    </html>
  );
}
